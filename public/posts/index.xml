<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on tempkdw blog</title>
    <link>https://tempkdw.github.io/posts/</link>
    <description>Recent content in Posts on tempkdw blog</description>
    <image>
      <title>tempkdw blog</title>
      <url>https://tempkdw.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://tempkdw.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.146.7</generator>
    <language>ko-kr</language>
    <lastBuildDate>Thu, 29 May 2025 21:41:45 +0900</lastBuildDate>
    <atom:link href="https://tempkdw.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Steel bank common lisp 으로 webserver 띄우기</title>
      <link>https://tempkdw.github.io/posts/start-web-server-with-sbcl/</link>
      <pubDate>Thu, 29 May 2025 21:41:45 +0900</pubDate>
      <guid>https://tempkdw.github.io/posts/start-web-server-with-sbcl/</guid>
      <description>&lt;h3 id=&#34;emacs-설치&#34;&gt;emacs 설치&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;brew install emacs&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;steel-bank-common-lisp-설치&#34;&gt;steel bank common lisp 설치&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;brew install sbcl&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;emacs-package-관리자-quicklisp-설치&#34;&gt;emacs package 관리자 quicklisp 설치&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -O https://beta.quicklisp.org/quicklisp.lisp
$ curl -O https://beta.quicklisp.org/quicklisp.lisp.asc
$ sbcl --load quicklisp.lisp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;중간 중간 나오는 명령어를 따라주면 된다.&lt;/p&gt;
&lt;h3 id=&#34;emacs-lisp-extension-인-slime-설정&#34;&gt;emacs lisp extension 인 slime 설정&lt;/h3&gt;
&lt;p&gt;quicklisp 에 자체 내장되어 있으므로 이걸 쓰도록 한다.&lt;/p&gt;
&lt;p&gt;따로 설치할 경우 emacs 내에서 충돌이 발생하는 일이 생기니 주의.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# ~/.emacs

(add-to-list &amp;#39;load-path &amp;#34;~/quicklisp/dists/quicklisp/software/slime-v2.30/&amp;#34;)

(require &amp;#39;slime-autoloads)
;; SLIME 설정
(setq inferior-lisp-program &amp;#34;sbcl&amp;#34;)
(setq slime-net-coding-system &amp;#39;utf-8-unix)

(slime-setup &amp;#39;(slime-fancy))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;경로는 다를수 있으니 체크&lt;/p&gt;</description>
    </item>
    <item>
      <title>drf-spectacular 에서 query param을 이용한 version 별 api 표기</title>
      <link>https://tempkdw.github.io/posts/drf-spectacular-versioning/</link>
      <pubDate>Wed, 23 Apr 2025 16:53:56 +0900</pubDate>
      <guid>https://tempkdw.github.io/posts/drf-spectacular-versioning/</guid>
      <description>&lt;p&gt;API 개발 하다보면 하위호환성을 지키기 위해 versioning 을 해야할 때가 있다.&lt;/p&gt;
&lt;p&gt;drf 에서는 여러가지 versioning 방법을 제공 중인데, swagger url 을 설정하기 번거롭다.&lt;/p&gt;
&lt;p&gt;때문에 drf 에서는 원하는 versioning 을 정의하고 swagger 에서는 QueryParameterVersioning 으로 접근 가능한 방법을 소개한다.&lt;/p&gt;
&lt;h3 id=&#34;drf-setting&#34;&gt;drf setting&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;REST_FRAMEWORK &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEFAULT_VERSIONING_CLASS&amp;#39;: &amp;#39;rest_framework.versioning.AcceptHeaderVersioning&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DEFAULT_VERSION&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ALLOWED_VERSIONS&amp;#34;&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;예제에서는 drf 에서는 accept header 를 이용한 versioning 을 사용한다. 그 외는 &lt;a href=&#34;https://www.django-rest-framework.org/api-guide/versioning/&#34;&gt;문서 참조&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;drf-spectacular-url-정의-및-setting&#34;&gt;drf-spectacular url 정의 및 setting&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; rest_framework.versioning &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; QueryParameterVersioning
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlpatterns &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;schema/&amp;#39;&lt;/span&gt;, SpectacularAPIView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_view(versioning_class&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;QueryParameterVersioning), name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;schema&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;schema/swagger-ui/&amp;#39;&lt;/span&gt;, SpectacularSwaggerView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_view(url_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api:schema&amp;#39;&lt;/span&gt;), name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;swagger-ui&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;schema/redoc/&amp;#39;&lt;/span&gt;, SpectacularRedocView&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;as_view(url_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api:schema&amp;#39;&lt;/span&gt;), name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;redoc&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;swagger-ui 페이지가 query param에 의해 version 을 변경할 수 있도록 view 에 versioning_class 를 QueryParameterVersioning 으로 정의한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>default value parameter 가 가독성에 미치는 해악</title>
      <link>https://tempkdw.github.io/posts/default_parameter/default_parameter/</link>
      <pubDate>Mon, 18 Dec 2023 14:43:45 +0900</pubDate>
      <guid>https://tempkdw.github.io/posts/default_parameter/default_parameter/</guid>
      <description>default parameter 는 refactoring 할 때만 씁시다.</description>
    </item>
    <item>
      <title>Mixin class 사용시 app 간 계층 구조</title>
      <link>https://tempkdw.github.io/posts/mixin_class/</link>
      <pubDate>Mon, 18 Dec 2023 14:43:45 +0900</pubDate>
      <guid>https://tempkdw.github.io/posts/mixin_class/</guid>
      <description>&lt;p&gt;앞서 포스팅한 &lt;a href=&#34;https://tempkdw.github.io/posts/circular_import/&#34;&gt;circular import 에 대한 생각&lt;/a&gt; 에서 해당 문제가 발생한 경우, 계층 구조를 먼저 생각해보자는 이야기를 했었다.&lt;/p&gt;
&lt;p&gt;이번에는 이어서 class 의 공통된 기능을 뽑아낼 때 계층 구조를 잘 잡기 위한 방법을 생각해보았다.&lt;/p&gt;
&lt;p&gt;일반적으로 Mixin class 는 하위 클래스들의 공통을 묶어 상위 abstract 로 뽑는데 사용되나, 가끔은 상위 클래스들에 공통된 기능을 붙이는 용도로도 사용된다.&lt;/p&gt;
&lt;p&gt;django 로 가정하고 예시를 든다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# A app&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nickname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate_nickname&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# B app&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;B&lt;/span&gt;(models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nickname &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CharField(&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate_nickname&lt;/span&gt;(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 공통된 field 와 method가 있는 경우, 파편화를 막기 위해 abstract model 을 이용하여 상위의 abstract class 를 만든다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python 내부의 C 코드 들여다보기</title>
      <link>https://tempkdw.github.io/posts/cpython-debug/</link>
      <pubDate>Fri, 21 Oct 2022 10:52:51 +0900</pubDate>
      <guid>https://tempkdw.github.io/posts/cpython-debug/</guid>
      <description>macOS 에서 lldb 를 사용하여 cpython 의 동작을 살펴보는 방법</description>
    </item>
    <item>
      <title>PEP 3119 ABC 번역</title>
      <link>https://tempkdw.github.io/posts/abc_pep_3119/</link>
      <pubDate>Fri, 23 Sep 2022 14:15:00 +0900</pubDate>
      <guid>https://tempkdw.github.io/posts/abc_pep_3119/</guid>
      <description>한국어 번역</description>
    </item>
    <item>
      <title>Circular import에 대한 생각</title>
      <link>https://tempkdw.github.io/posts/circular_import/</link>
      <pubDate>Sun, 21 Feb 2021 13:34:20 +0900</pubDate>
      <guid>https://tempkdw.github.io/posts/circular_import/</guid>
      <description>Circular import 문제를 해결하기 위한 방법.</description>
    </item>
    <item>
      <title>Early return에 대한 생각</title>
      <link>https://tempkdw.github.io/posts/early_return/</link>
      <pubDate>Wed, 17 Feb 2021 20:40:20 +0900</pubDate>
      <guid>https://tempkdw.github.io/posts/early_return/</guid>
      <description>분기와 early-return은 다르게 쓰여야 한다.</description>
    </item>
  </channel>
</rss>
